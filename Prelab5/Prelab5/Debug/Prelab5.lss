
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b6  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000779  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	ICR1 = 2499; // Valor máximo para no exceder 20ms 
	
} */
void ADC_init()
{
	ADMUX =0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<< REFS0); //REFERENCIA = VCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<< ADLAR); // JUSTIFICACIÓN A LA IZQUIERDA
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1)); // Limpiar bits MUX
  a2:	80 81       	ld	r24, Z
  a4:	81 7f       	andi	r24, 0xF1	; 241
  a6:	80 83       	st	Z, r24
	ADMUX |=  (1<< MUX0); //HABILITAR EL ADC 1
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	ADCSRA |= (1<< ADPS1) | (1<< ADPS0) | (1<< ADEN) | (1<< ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	8b 68       	ori	r24, 0x8B	; 139
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADSC);
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
}

//NON_Interrupt subroutines 
void setup()
{
	cli();
  c2:	f8 94       	cli
	// Configurar presclaer de sistema
	CLKPR	= (1 << CLKPCE);
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // 16 PRESCALER -> 1MHz
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	80 83       	st	Z, r24
	DDRB |= (1 << DDB1); 
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	84 b9       	out	0x04, r24	; 4
	UCSR0B = 0;
  d6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PWM1_init(); 
  da:	0e 94 af 00 	call	0x15e	; 0x15e <PWM1_init>
	ADC_init();
  de:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <main>:
//uint16_t Valor_Servo_PWM(uint8_t ADC_v);


int main(void)
{
	setup();
  e6:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x4>

000000ec <__vector_21>:
	ADCSRA |= (1<< ADPS1) | (1<< ADPS0) | (1<< ADEN) | (1<< ADIE);
	ADCSRA |= (1<< ADSC);
}

//ISR 
ISR(ADC_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	Valor_ADC = ADCH;
 10e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTD = ADCH;
	DutyCycle= Valor_Servo_PWM(Valor_ADC);
 116:	0e 94 c3 00 	call	0x186	; 0x186 <Valor_Servo_PWM>
 11a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <DutyCycle+0x1>
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DutyCycle>
	rest_servo(DutyCycle); 
 122:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <rest_servo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <__vector_21+0x3e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_21+0x44>
 130:	00 00       	nop
	_delay_ms(1);
	ADCSRA |= (1<<ADSC);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <PWM1_init>:
#include <avr/interrupt.h>
#include <util/delay.h>
void PWM1_init()
{
	// Configurar Timer1 en modo Fast (no invertido)
	TCCR1A |= (1 << COM1A1);
 15e:	e0 e8       	ldi	r30, 0x80	; 128
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 68       	ori	r24, 0x80	; 128
 166:	80 83       	st	Z, r24
	TCCR1A |=( 1 << WGM11);
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1 << CS11); //Fast mode 8 bits, prescaler de 8
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8a 61       	ori	r24, 0x1A	; 26
 176:	80 83       	st	Z, r24
	ICR1 = 2499; // Valor máximo para no exceder 20ms
 178:	83 ec       	ldi	r24, 0xC3	; 195
 17a:	99 e0       	ldi	r25, 0x09	; 9
 17c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 180:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 184:	08 95       	ret

00000186 <Valor_Servo_PWM>:
	
}
uint16_t Valor_Servo_PWM(uint8_t ADC_v)
{
	return (ADC_v * 239UL / 255) + 69;
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	af ee       	ldi	r26, 0xEF	; 239
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__umulhisi3>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodsi4>
}
 19e:	c9 01       	movw	r24, r18
 1a0:	8b 5b       	subi	r24, 0xBB	; 187
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	08 95       	ret

000001a6 <rest_servo>:

void rest_servo(uint16_t duty)
{
	OCR1A = duty;	// Se actualiza el registro con el valor correcto.
 1a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ae:	08 95       	ret

000001b0 <__udivmodsi4>:
 1b0:	a1 e2       	ldi	r26, 0x21	; 33
 1b2:	1a 2e       	mov	r1, r26
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	fd 01       	movw	r30, r26
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <__udivmodsi4_ep>

000001bc <__udivmodsi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	ee 1f       	adc	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e4 07       	cpc	r30, r20
 1ca:	f5 07       	cpc	r31, r21
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <__udivmodsi4_ep>
 1ce:	a2 1b       	sub	r26, r18
 1d0:	b3 0b       	sbc	r27, r19
 1d2:	e4 0b       	sbc	r30, r20
 1d4:	f5 0b       	sbc	r31, r21

000001d6 <__udivmodsi4_ep>:
 1d6:	66 1f       	adc	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	88 1f       	adc	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	1a 94       	dec	r1
 1e0:	69 f7       	brne	.-38     	; 0x1bc <__udivmodsi4_loop>
 1e2:	60 95       	com	r22
 1e4:	70 95       	com	r23
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	9b 01       	movw	r18, r22
 1ec:	ac 01       	movw	r20, r24
 1ee:	bd 01       	movw	r22, r26
 1f0:	cf 01       	movw	r24, r30
 1f2:	08 95       	ret

000001f4 <__umulhisi3>:
 1f4:	a2 9f       	mul	r26, r18
 1f6:	b0 01       	movw	r22, r0
 1f8:	b3 9f       	mul	r27, r19
 1fa:	c0 01       	movw	r24, r0
 1fc:	a3 9f       	mul	r26, r19
 1fe:	70 0d       	add	r23, r0
 200:	81 1d       	adc	r24, r1
 202:	11 24       	eor	r1, r1
 204:	91 1d       	adc	r25, r1
 206:	b2 9f       	mul	r27, r18
 208:	70 0d       	add	r23, r0
 20a:	81 1d       	adc	r24, r1
 20c:	11 24       	eor	r1, r1
 20e:	91 1d       	adc	r25, r1
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
