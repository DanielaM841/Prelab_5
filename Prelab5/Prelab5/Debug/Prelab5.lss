
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa0  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000866  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ee  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000191  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	ADCSRA	|= (1 << ADSC);	
	sei();
}
void ADC_init()
{
	ADMUX =0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<< REFS0); //REFERENCIA = VCC
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX |= (1<< ADLAR); // JUSTIFICACIÓN A LA IZQUIERDA
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1)); // Limpiar bits MUX 
  a2:	80 81       	ld	r24, Z
  a4:	81 7f       	andi	r24, 0xF1	; 241
  a6:	80 83       	st	Z, r24
	//ADMUX |=  (1<< MUX0); //HABILITAR EL ADC 1
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1<< ADPS1) | (1<< ADPS0) | (1<< ADEN) | (1<< ADIE);
  ae:	80 81       	ld	r24, Z
  b0:	8b 68       	ori	r24, 0x8B	; 139
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <setup>:
}

//NON_Interrupt subroutines 
void setup()
{
	cli();
  b6:	f8 94       	cli
	// Configurar presclaer de sistema
	CLKPR	= (1 << CLKPCE);
  b8:	e1 e6       	ldi	r30, 0x61	; 97
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // 16 PRESCALER -> 1MHz
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
	DDRB |= (1 << DDB1) | (1 << DDB2) | (1 << DDB3); //configurar los camales A y b del timer 1 como salida 
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8e 60       	ori	r24, 0x0E	; 14
  c8:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1 << PORTB3); 
	UCSR0B = 0;
  ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PWM1_init();  
  ce:	0e 94 3b 01 	call	0x276	; 0x276 <PWM1_init>
	ADC_init();
  d2:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	initT0L();
  d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <initT0L>
	ADCSRA	|= (1 << ADSC);	
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <main>:
//uint8_t ValorPMW_T0_F(uint8_t valordelADC);
//void comparacion_T0(uint8_t top, uint8_t Valor_comparacion);

int main(void)
{
	setup();
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0xe>
  f6:	00 00       	nop
  f8:	f9 cf       	rjmp	.-14     	; 0xec <main+0x4>

000000fa <__vector_16>:
	//_delay_ms(2);
	ADCSRA |= (1<<ADSC);
	
}
ISR(TIMER0_OVF_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	Contador_T0++;						// Se suma el contador del timer
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Contador_T0>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Contador_T0>
	if (Contador_T0<DutyCycle_LED){
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	82 17       	cp	r24, r18
 122:	93 07       	cpc	r25, r19
 124:	20 f4       	brcc	.+8      	; 0x12e <__vector_16+0x34>
		PORTB |= (1<<PORTB3);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	06 c0       	rjmp	.+12     	; 0x13a <__vector_16+0x40>
	}
	else if (Contador_T0>=DutyCycle_LED){
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	18 f0       	brcs	.+6      	; 0x13a <__vector_16+0x40>
		PORTB &= ~(1<<PORTB3);
 134:	85 b1       	in	r24, 0x05	; 5
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	85 b9       	out	0x05, r24	; 5
	}
	if (Contador_T0 >= 20)
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Contador_T0>
 13e:	84 31       	cpi	r24, 0x14	; 20
 140:	10 f0       	brcs	.+4      	; 0x146 <__vector_16+0x4c>
	{
		Contador_T0 = 0;
 142:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Contador_T0>
	}									// Se hace un if para evitar parpadeo
	TCNT0	= 251;						// Se carca el valor a TCNT0
 146:	8b ef       	ldi	r24, 0xFB	; 251
 148:	86 bd       	out	0x26, r24	; 38
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <Valor_Servo_PWM2>:

//Funciones de las librerias 
uint16_t Valor_Servo_PWM2(uint8_t ADC_v2)
{
	return (ADC_v2 * 239UL / 255) + 69; 
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	af ee       	ldi	r26, 0xEF	; 239
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	0e 94 a1 01 	call	0x342	; 0x342 <__umulhisi3>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodsi4>
}
 174:	c9 01       	movw	r24, r18
 176:	8b 5b       	subi	r24, 0xBB	; 187
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	08 95       	ret

0000017c <rest_servo2>:

void rest_servo2(uint16_t duty)
{
	OCR1B = duty;	// Se actualiza el registro con el valor correcto. 
 17c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 180:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 184:	08 95       	ret

00000186 <Mux_pines>:
}

void Mux_pines()
{
	//Contador_Mux++;
	switch(Contador_Mux)
 186:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Contador_Mux>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	c9 f0       	breq	.+50     	; 0x1c0 <Mux_pines+0x3a>
 18e:	18 f0       	brcs	.+6      	; 0x196 <Mux_pines+0x10>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	51 f1       	breq	.+84     	; 0x1e8 <Mux_pines+0x62>
 194:	3d c0       	rjmp	.+122    	; 0x210 <Mux_pines+0x8a>
	{
		case 0: 
		ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1)|(1<< MUX0)); // Limpiar bits MUX
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	80 83       	st	Z, r24
		ADMUX |=  (1<< MUX0); //HABILITAR EL ADC 1
 1a0:	80 81       	ld	r24, Z
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
		Valor_ADC = ADCH;
 1a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Valor_ADC>
		DutyCycle= Valor_Servo_PWM(Valor_ADC);
 1ae:	0e 94 4f 01 	call	0x29e	; 0x29e <Valor_Servo_PWM>
 1b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DutyCycle+0x1>
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DutyCycle>
		rest_servo(DutyCycle);
 1ba:	0e 94 5f 01 	call	0x2be	; 0x2be <rest_servo>
		
		//DutyCycle= Valor_Servo_PWM(Valor_ADC);
		//rest_servo(DutyCycle);
		break;
 1be:	28 c0       	rjmp	.+80     	; 0x210 <Mux_pines+0x8a>
		case 1:
		
		ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1)|(1<< MUX0)); // Limpiar bits MUX
 1c0:	ec e7       	ldi	r30, 0x7C	; 124
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	80 83       	st	Z, r24
		ADMUX |=  (1<< MUX1); //HABILITAR EL ADC 2
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
		led_pmw= ADCH;
 1d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <led_pmw>
		DutyCycle_LED=ValorPMW_T0_F(led_pmw);
 1d8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <ValorPMW_T0_F>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 1e6:	14 c0       	rjmp	.+40     	; 0x210 <Mux_pines+0x8a>
		case 2:
		ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1)|(1<< MUX0)); // Limpiar bits MUX
 1e8:	ec e7       	ldi	r30, 0x7C	; 124
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	80 83       	st	Z, r24
		ADMUX |=  (1<< MUX2) ; //HABILITAR EL ADC 3
 1f2:	80 81       	ld	r24, Z
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	80 83       	st	Z, r24
		Valor_ADC2 = ADCH;
 1f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Valor_ADC2>
		DutyCycle= Valor_Servo_PWM2(Valor_ADC2);
 200:	0e 94 ae 00 	call	0x15c	; 0x15c <Valor_Servo_PWM2>
 204:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DutyCycle+0x1>
 208:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DutyCycle>
		rest_servo2(DutyCycle);
 20c:	0e 94 be 00 	call	0x17c	; 0x17c <rest_servo2>
		break;
		default:
		break;
		}
		Contador_Mux++;
 210:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Contador_Mux>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Contador_Mux>
		if(Contador_Mux==3){
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	11 f4       	brne	.+4      	; 0x222 <Mux_pines+0x9c>
		Contador_Mux=0; 
 21e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Contador_Mux>
 222:	08 95       	ret

00000224 <__vector_21>:
		}
		
}

//ISR 
ISR(ADC_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	Mux_pines();
 246:	0e 94 c3 00 	call	0x186	; 0x186 <Mux_pines>
	//_delay_ms(2);
	ADCSRA |= (1<<ADSC);
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24
	
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <PWM1_init>:
#include <avr/interrupt.h>
#include <util/delay.h>
void PWM1_init()
{
	// Configurar Timer1 en modo Fast (no invertido)
	TCCR1A |= (1 << COM1A1)|(1<<COM1B1);;
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 6a       	ori	r24, 0xA0	; 160
 27e:	80 83       	st	Z, r24
	TCCR1A |=( 1 << WGM11);
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1 << CS11); //Fast mode 8 bits, prescaler de 8
 286:	e1 e8       	ldi	r30, 0x81	; 129
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	8a 61       	ori	r24, 0x1A	; 26
 28e:	80 83       	st	Z, r24
	ICR1 = 2499; // Valor máximo para no exceder 2ms
 290:	83 ec       	ldi	r24, 0xC3	; 195
 292:	99 e0       	ldi	r25, 0x09	; 9
 294:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 298:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 29c:	08 95       	ret

0000029e <Valor_Servo_PWM>:
	
}
uint16_t Valor_Servo_PWM(uint8_t ADC_v)
{
	return (ADC_v * 239UL / 255) + 69;
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	af ee       	ldi	r26, 0xEF	; 239
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	0e 94 a1 01 	call	0x342	; 0x342 <__umulhisi3>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodsi4>
}
 2b6:	c9 01       	movw	r24, r18
 2b8:	8b 5b       	subi	r24, 0xBB	; 187
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	08 95       	ret

000002be <rest_servo>:

void rest_servo(uint16_t duty)
{
	OCR1A = duty;	// Se actualiza el registro con el valor correcto.
 2be:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2c2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2c6:	08 95       	ret

000002c8 <initT0L>:
#include <avr/interrupt.h>
#include <util/delay.h>

void initT0L() // PWM0 manual usando timer0
{
	TIMSK0 |= (1<<TOIE0);
 2c8:	ee e6       	ldi	r30, 0x6E	; 110
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 83       	st	Z, r24
	TCCR0A	|= 0;
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B	|= (1 << CS01); // Prescaler = 8
 2d6:	85 b5       	in	r24, 0x25	; 37
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	85 bd       	out	0x25, r24	; 37
	TCNT0	= 251;
 2dc:	8b ef       	ldi	r24, 0xFB	; 251
 2de:	86 bd       	out	0x26, r24	; 38
 2e0:	08 95       	ret

000002e2 <ValorPMW_T0_F>:
}
uint8_t ValorPMW_T0_F(uint8_t valordelADC){
	return (valordelADC * 50UL) / 255;
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	a2 e3       	ldi	r26, 0x32	; 50
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	0e 94 a1 01 	call	0x342	; 0x342 <__umulhisi3>
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__udivmodsi4>
 2fa:	82 2f       	mov	r24, r18
 2fc:	08 95       	ret

000002fe <__udivmodsi4>:
 2fe:	a1 e2       	ldi	r26, 0x21	; 33
 300:	1a 2e       	mov	r1, r26
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	fd 01       	movw	r30, r26
 308:	0d c0       	rjmp	.+26     	; 0x324 <__udivmodsi4_ep>

0000030a <__udivmodsi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	ee 1f       	adc	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	a2 17       	cp	r26, r18
 314:	b3 07       	cpc	r27, r19
 316:	e4 07       	cpc	r30, r20
 318:	f5 07       	cpc	r31, r21
 31a:	20 f0       	brcs	.+8      	; 0x324 <__udivmodsi4_ep>
 31c:	a2 1b       	sub	r26, r18
 31e:	b3 0b       	sbc	r27, r19
 320:	e4 0b       	sbc	r30, r20
 322:	f5 0b       	sbc	r31, r21

00000324 <__udivmodsi4_ep>:
 324:	66 1f       	adc	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a 94       	dec	r1
 32e:	69 f7       	brne	.-38     	; 0x30a <__udivmodsi4_loop>
 330:	60 95       	com	r22
 332:	70 95       	com	r23
 334:	80 95       	com	r24
 336:	90 95       	com	r25
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	bd 01       	movw	r22, r26
 33e:	cf 01       	movw	r24, r30
 340:	08 95       	ret

00000342 <__umulhisi3>:
 342:	a2 9f       	mul	r26, r18
 344:	b0 01       	movw	r22, r0
 346:	b3 9f       	mul	r27, r19
 348:	c0 01       	movw	r24, r0
 34a:	a3 9f       	mul	r26, r19
 34c:	70 0d       	add	r23, r0
 34e:	81 1d       	adc	r24, r1
 350:	11 24       	eor	r1, r1
 352:	91 1d       	adc	r25, r1
 354:	b2 9f       	mul	r27, r18
 356:	70 0d       	add	r23, r0
 358:	81 1d       	adc	r24, r1
 35a:	11 24       	eor	r1, r1
 35c:	91 1d       	adc	r25, r1
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
